<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<?xml-stylesheet type="text/css" href="index.css"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">

    <head>
		<meta http-equiv="Content-Type" content="text/xml ; charset=UTF-8"/>
		<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css' />
        <link href="https://fonts.googleapis.com/css?family=Bungee|Roboto" rel="stylesheet"/>
        <title>BE3 - XSLT</title>
	</head>

	<body>
        <div class="container">
            <div id="holder-header">
                <div id="header" class="col-xs-12 col-md-12">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <h1>XML StyleSheet Transformation</h1>
                            <p>by DEVAUX Camille &amp; GROUSSARD Arnaud</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
		<div class="main">
			<div class="container">
				<div class="col-xs-12 col-md-8">
					<div class="titre">
                        <h2>Démarche suivie et raisonnement</h2>
                    </div>
                    <p>Pour ce BE, nous devions transformer un même document XML avec différentes feuilles de style, en les transformant en tableaux, fiches, schémas, graphiques, PDFs.</p>
                    <div class="titre">
					    <h2>Difficultés rencontrées lors de l'utilisation d'XML Stylesheet Transformation</h2>
                        <ul>
                            <li>Quel type d'output doit-on mettre : output xhtml</li>
                            <li>Problème pour savoir si appliquer apply template ou value of. <i>value-of</i> permet d'extraire le texte, alors que <i>apply-templates</i> laisse le choix de surcharger le style <i>text</i> de XSLT</li>
                            <li>Porblème pour savoir comment gérer le mailto sachant que c'est embedded dans des guillemts</li>
                            <li>problème pour faire correspondre des informations venant de <i>personnes</i> et d'autres venant de <i>cours</i></li>
                            <li>Problème pour gerer la mise en page : solution ajouter une feuille de style CSS dans la feuille de style XSLT ou bien ajouter un section <i>style</i> après <i>html</i></li>
                            <li>Questionnement sur l'encapsulation : Un seul <i>apply-template</i>, ou bien plusieurs qui ne sont pas encapsulés ?</li>
                            <li>Comment virer les données des cours qui ne nous servent à rien pour la première feuille ? Solution, supprimer le <i>apply-templates</i> general que nous avons mis par défaut au début du document.</li>
                            <li>Comment gérér l'information de téléphone manquante qui décale le contenu des cellules ? Traitement récursif vs. traitement procédural. En adoptant un traitement procédural, la case s'affiche avec un contenu vide.</li>
                            <li>Quel type d'output doit-on mettre : output xhtml</li>
                        </ul>
                    </div>
                    <div class="titre">
                        <h2>Dévelopment d'une feuille de style XSL simple</h2>
                    </div>

                    <p>Dans cette première partie, nous développons une feuille de style simple, pour visualiser les informations des personnes contenues dans le document XML.</p>
                    <p>Cette page présente les informations sur les personnes du document XML en 2 tableaux, un premier concerne les professeurs, et le second les élèves.</p>
                    <p>Comme la plupart des travaux effectués dans ce cours, ceux-ci ont été developpés itérativement, en commencant par des versions très simples, puis par petites améliorations itératives, en intégrant d'avantages de fonctionnalités et de traitements des données en fonction des problèmes rencontrés et de notre maîtrise croissante de XSLT lors du développement.</p>
                    <p>Cette première partie nous a permis de découvrir XSLT, ses possibilités, et ses premières limitations :</p>
                    <ul>
                        <li>Nous avons choisi d'avoir recours à une feuille de style CSS indépendante pour gérer le style de la mise en page. La transformation des données et le style de la mise en page est ainsi géré indépendamment.</li>
                        <li>Que choisir entre schéma plats ou profonds, entre <i>xsl:apply-templates</i> ou <i>xsl:value-of</i>, traitement récursif ou procédural ? Nous avons par la suite souvent utilisé un mix des deux solutions qui se proposaient à nous afin de répondre au mieux à nos besoins. </li>
                    </ul>


                    <div class="titre">
                        <h2>Autres feuilles de style</h2>
                    </div>

                    <p>Dans cette partie, nous ne voulons non plus mettre en forme le document xml sous forme de tableau simple mais plutôt choisir les données qui nous intéressent et les représenter au mieux.</p>

                    <p>Nous avons donc créé deux pages : Une fiche élève répertoriant la liste des élèves et les cours auxquels ceux-ci sont inscrits avec notes, appréciations et absences, et une fiche cours répertoriant la liste des cours, le professeur responsable ainsi que les élèves inscrits avec notes, appréciations et absences.</p>

                    <div class="titre">
                        <h3>Fiches Elèves</h3>
                    </div>

                    <p><b>Pour les FICHES ELEVES</b>, nous partons d'un identifiant étudiant (<i>ID</i>) dans la branche <i>personnes</i> pour aller chercher la liste de nos étudiants.</p>
                    <p>Or dans <i>personnes</i>, nous avons également les professeurs. Nous ne devons donc sélectionner <b>que les étudiants</b>.</p>
                    <p>Pour cela nous sélectionnons l'identifiant d'un étudiant, puis nous <b>testons si cet attribut est renseigné dans tout le document</b> pour aller chercher les élements <i>nom</i>, <i>prénom</i>, <i>notes</i>, <i>appréciations</i> et <i>absences</i>.</p>
                    <p>Nous ne prenons donc pas un à un les entités présentes dans personnes, mais "survolons" le document XML avec l'id d'un étudiant.</p>

                    <div class="titre">
                        <h3>Fiches Elèves</h3>
                    </div>

                    <p><b>Pour les FICHES COURS</b>, nous nous reportons à la branche <i>cours</i> de notre document XML. Nous récupérons l'intitulé du cours puis à partir de celui-ci nous allons chercher l'id du professeur responsable.</p>
                    <p>Nous devons enregistrer l'id du professeur dans une variable pour ensuite pouvoir récupérer le nom et le prénom du professeur qui se trouvent dans l'autre branche du document xml, <i>personnes</i>.</p>
                    <p>Une fois <i>nom</i> et <i>prénom</i> récupérés, nous retournons dans la branche <i>cours</i>, et nous procédons de même pour les étudiants inscrits au cours : récupération de l'id, correspondance dans la branche <i>personnes</i> et récupération du <i>nom</i> et <i>prénom</i>. Puis enfin nous allons chercher leurs <i>notes</i>, <i>absences</i> et <i>appréciations</i> simplement dans la branche <i>cours</i> sur laquelle nous avons commencé.</p>
                    <p>Cette fiche <b>nécessite de parcourir plusieurs fois l'arbre défini par le document XML et de définir plusieurs variables</b>. Nous avons utilisé des <b>modes</b> pour mieux organiser notre code et définir les templates XSL non pas directement lorsque explicités, mais séparément.
                        Les modèles nommés permettent de <b>mieux manipuler des templates nécessitant des appels aux contenus présents dans une autre branche que celle sur laquelle nous nous situons.</b></p>
                    <div class="titre">
                        <h3>Graphique SVG</h3>
                    </div>
                    <p>Dans cette partie, nous avons utilisé XSLT pour créer un graphique à partir des données du document XML.</p>
                    <p>Le graphique représente les notes obtenues dans chaque cours, de façon anonyme, et la moyenne des notes de chaque cours. L'intérêt de construire un graphique sous XSLT réside dans la génération dynamique de celui-ci par rapport aux données. En effet, à condition que la structure initiale des données soit respectée, les données seront affichées dans le graphique, quelque soit leur volume.</p>
                    <p>Afin de completer cet aspect dynamique, nous avons paramétré quelques grandeurs géométriques notables du graphique, qui ne sont pas directement dépendantes des données, mais qui participent à l'harmonie globale du graphique. On peut retrouver notamment :</p>
                    <ul>
                        <li>Marge extérieur latérale</li>
                        <li>Marge intérieur latérale</li>
                        <li>Marge extérieur supérieure</li>
                        <li>Marge intérieur supérieure</li>
                        <li>Hauteur de l'échelle de notation</li>
                        <li>Hauteur dédiée à l'intitulé des cours</li>
                        <li>Largeur des colonnes de cours</li>
                        <li>Zoom global du graphique</li>
                    </ul>
                    <p>Cette partie a nécéssité un usage intensif de l'insertion d'éléments et d'attributs (<i>xsl:element</i> et <i>xsl:attribute</i>). En effet, beaucoup d'attribut sont dépendants de calculs réalisés à partir des données du document XML et du paramétrage mis en place, les éléments et leurs attributs sont majoritairement dynamiques.</p>
                    <p>La mise en place de graduations (de 0, à 20), indépendantes des données du document XML, nous a permit de voir une limite de l'application XSLT, le manque de dispositif permettant de réaliser des boucles <i>for</i> ou  <i>while</i>, sur des éléments indépendants du document XML initial. Ainsi, ces graduations ont dû être écrites "à la main", sans la possibilité (à notre connaissance) d'utiliser un processus récursif.</p>
                    <p>Quelques autres défis se sont présentés lors du développement du graphique, comme le contrôle du nombre de chiffres significatifs des moyennes calculées, par exemple, où nous avons du nous en remettre à la fonction <i>round</i> sur des nombres intermédiaires.</p>

                    <div class="titre">
                        <h3>Papier - XSLT-FO</h3>
                    </div>
                    <p>Un essai sous XSLT-FO a été effectué, mais il ne nous pas été possible de tester celui-ci avec le moteur de transformation Apache-FOP</p>
				</div>
                <div class="col-xs-12 col-md-4">
                    <div class="div_padding">
                        <div class="titre">
                            <h3>Titre Option</h3>
                        </div>
                        <p>Lorem Ipsum</p>
                    </div>
                </div>
                <div class="col-md-12">
                    <h2>Conclusion</h2>
                    <p>Lorem Ipsum</p>
                </div>
			</div>
		</div>
	</body>
</html>